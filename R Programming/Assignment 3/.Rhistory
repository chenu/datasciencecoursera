source("http://bioconductor.org/biocLite.R")
biocLite("DESeq2")
biocLite("org.Mm.eg.db")
biocLite(“GOstats”)
biocLite("GOstats")
biocLite("gplots")
RColorBrewer
install.packages("RColorBrewer")
install.packages("KernSmooth")
KernSmooth
KernSmooth()
package(KernSmooth)
library(KernSmooth)
clear
?matrix
data("mtcars")
?tapply
tapply(mtcars$mpg, mtcars$cyl, mean)
mtcars
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
## makeCatcheMatriix takes x as argument and provides Inverse of X
## InverseX is the object which gives the Inverse of X
## y is the value used to set the value of x using set function
## get function gives the value of matrix x
## setInverse directly assigns the value of Inverse of X
## getInverse return the value of the X inverse
makeCacheMatrix <- function(x = matrix()) {
InverseX <- NULL
set <- function(y) {
x <<- y
InverseX <<- NULL
}
get <- function() x
setInverse <- function(Inverse) InverseX <<- Inverse
getInverse <- function() InverseX
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## If the inverse of X is already calculated the function getInverse
## in x data set will return Non Null value and same will be returned
## else the Solve function will valculate the inverse of R and set
## the values for makeCatchMatrix as well
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
InverseX <- x$getInverse()
if(!is.null(InverseX)) {
message("getting cached data")
return(InverseX)
}
data <- x$get()
InverseX <- solve(data)
x$setInverse(InverseX)
InverseX
}
x <- rbind(c(1,.25), c(.25,1))
x
cm <- makeCacheMatrix(x)
cm$get()
cacheSolve(cm)
cacheSolve(cm)
## makeCatcheMatriix takes x as argument and provides Inverse of X
## InverseX is the object which gives the Inverse of X
## y is the value used to set the value of x using set function
## get function gives the value of matrix x
## setInverse directly assigns the value of Inverse of X
## getInverse return the value of the X inverse
makeCacheMatrix <- function(x = matrix()) {
InverseX <- NULL
set <- function(y) {
x <<- y
InverseX <<- NULL
}
get <- function() x
setInverse <- function(Inverse) InverseX <<- Inverse
getInverse <- function() InverseX
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## If the inverse of X is already calculated the function getInverse
## in x data set will return Non Null value and same will be returned
## else the Solve function will valculate the inverse of R and set
## the values for makeCatchMatrix as well
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
InverseX <- x$getInverse()
if(!is.null(InverseX)) {
message("getting cached data")
return(InverseX)
}
data <- x$get()
InverseX <- solve(data)
x$setInverse(InverseX)
InverseX
}
cm <- makeCacheMatrix(x)
x
cm
cm$get()
cacheSolve(cm)
cacheSolve(cm)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
#This function creates a vector which is basically a list that contains functions to
#set the matrix, get the matrix, set the inverse of the matrix and get
#the inverse of the matrix
makeCacheMatrix <- function(x = matrix()) {
#we start by introducing a number of functions that set matrix,
#return value of matrix, set the inverse of the matrix and get the inverse matrix for the matrix.
#to begin for any matrix, the inverse is first set to NULL
mat_inv <- NULL
#now we define the methods that will be responsible for setting & getting the matrix itself
#function that sets the matrix to the matrix passed to the function
set<-function(mat){
x <<- mat
mat_inv <<- NULL
}
#function that returns the matrix
get<- function(){
x
}
#this function will set the inverse of the matrix
setInv <- function(passed_inv){
mat_inv <- passed_inv
}
#this function will get the inverse of the matrix, if inverse matrix is not set for the current matrix,
# it will return NULL
getInv <- function(){
mat_inv
}
#prepare a list of all the functions defined above, to be returned.
list(set = set, get = get,
setInv = setInv,
getInv = getInv)
#this list is returned.
#End of makeCacheMatrix()
}
## Write a short comment describing this function
## cacheSolve function calculates the inverse of the matrix, but first, it checks
# if the inverse for the matrix has been calculated AND the matrix has not changed, if yes then
# it returns the cached matrix value, otherwise it calculates the inverse value and stores it in cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
#first we get the inverse for the current matrix by calling getInv()
m_inv <- x$getInv()
#then we check if it is equal to NULL AND both the matrices are the same
if(!is.null(m_inv) && identical(x,x$get()))
{
#get the cached inverse
message("getting cached data")
return(m_inv)
}
#otherwise, calculate the inverse of the matrix and cache
# and return it.
data <- x$get()
m_inv <- solve(data)
x$setInv(m_inv)
m_inv
}
x
cm <- makeCacheMatrix(x)
cacheSolve(cm)
cacheSolve(cm)
## The following functions calculate the inverse of a matrix and saves it
## to the cache such that the next time the user attempts to calculate the
## matrix inverse, the previously saved value is returned instead of
## repeating the calculation.
## This function creates a special "matrix" object, which is really a list
## containing a function to
## 1. set the value of the matrix
## 2. get the value of the matrix
## 3. set the value of the inverse
## 4. get the value of the inverse
makeCacheMatrix <- function(x = matrix()) {
## create a matrix object x and some associated sub-functions/methods
## define the cache m
m <- NULL
set <- function(y) {
x <<- y ## assign the input matrix y to the variable x in the
## parent environment
m <<- NULL ## re-initialize m in the parent environment to null
}
get <- function() x ## return the matrix x
setinverse <- function(inverse) m <<- inverse ## set the cache m equal
## to the inverse of the matrix x
getinverse <- function() m ## return the cached inverse of x
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## The following function calculates the inverse of the special "matrix" created
## with the above function. However, it first checks to see if the inverse
## has already been caclulated. If so, it 'get's the inverse from the cache
## and skips the computation. Otherwise, it calculates the matrix inverse
## and sets the value of the inverse in the cache via the 'setinverse' function.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
cm <- makeCacheMatrix(x)
cacheSolve(cm)
cacheSolve(cm)
## Matrix inversion is usually a costly computation and there may be some benefit to
## caching the inverse of a matrix rather than compute it repeatedly
## The following two functions are designed for caching the inverse of a matrix.
## makeCacheMatrix function creates a special "matrix" which is really a list containing
## a function to:
## 1. set the value of the matrix
## 2. get the value of the matrix
## 3. set the value of the inverse
## 4. get the value of the inverse
makeCacheMatrix <- function(x = matrix()) {
i<- NULL                                           ## initialize i(inverse) == NULL
setmatrix <- function(y) {                         ## set the value of the matrix
x <<- y
i <<- NULL
}
getmatrix <- function() x                             ## get the value of the matrix
setinverse <- function(inverse) i <<- inverse         ## set the value of the inverse
getinverse <- function() i                           ## get the value of the inverse
list(setmatrix = setmatrix, getmatrix = getmatrix,   ## return a list
setinverse = setinverse,
getinverse = getinverse)
}
##cacheSolve function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
##If the inverse has already been calculated (and the matrix has not changed),
##then the cachesolve should retrieve the inverse from the cache.
##If not, it computes the inverse, then sets the value in the cache by using setinverse function.
##In this project, we assume that the matrix supplied is always invertible.
cacheSolve <- function(x, ...) {
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$getmatrix()
i <- solve(data, ...)     ## solve function is used to compute the inverse of a square matrix in R
x$setinverse(i)
i                         ## Return a matrix that is the inverse of 'x'
}
cm <- makeCacheMatrix(x)
cacheSolve(cm)
cacheSolve(cm)
x -> y
cm.1 <- makeCacheMatrix(y)
cacheSolve(cm.1)
cacheSolve(cm.1)
?str
setwd("~/Desktop/untitled folder 2/R Programming/Assignment 4")
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
ncol(outcome)
outcome[, 11] <- as.numeric(outcome[, 11])
hist(outcome[, 11])
names(outcome)
best <- function(state, outcome) {
## Read outcome data
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
states <- unique(outcome$State)
outcomes <- c("heart attack", "heart failure", "pneumonia")
## Check that state and outcome are valid
if (!(state %in% states)) {
stop("invalid state")
}
if (!(outcome %in% outcomes)) {
stop("invalid outcome")
}
## Return hospital name in that state with lowest 30-day death
## rate
outcomes2 <- outcomes[outcomes$State == state, ]
outcomes2[, c(11, 17, 23)] <- sapply(outcomes2[, c(11, 17, 23)], as.numeric)
outcomes2 <- outcomes2[order(outcomes2[,2]), ]
if (outcome == "heart attack") {
best <- outcomes2[which.min(outcomes2[, 11]), "Hospital.Name"]
}
else if (outcome == "heart failure") {
best <- outcomes2[which.min(outcomes2[, 17]), "Hospital.Name"]
}
else {
best <- outcomes2[which.min(outcomes2[, 23]), "Hospital.Name"]
}
best
}
best("TX", "heart attack")
state <- "SC"
outcome <- "heart attack"
best <- function(state, outcome) {
## Read outcome data
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
df <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
states <- unique(df$State)
outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!(state %in% states)) {
stop("invalid state")
}
if (!(outcome %in% outcomes)) {
stop("invalid outcome")
}
df2 <- df[df$State == state, ]
df2[, c(11, 17, 23)] <- sapply(df2[, c(11, 17, 23)], as.numeric)
df2 <- df2[order(df2[, 2]), ]
if (outcome == "heart attack") {
best <- df2[which.min(df2[, 11]), "Hospital.Name"]
}
else if (outcome == "heart failure") {
best <- df2[which.min(df2[, 17]), "Hospital.Name"]
}
else {
best <- df2[which.min(df2[, 23]), "Hospital.Name"]
}
best
}
best("TX", "heart attack")
best("MD", "heart attack")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
df <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
df <- df[c(2, 7, 11, 17, 23)]
df[, c(3, 4, 5)] <- sapply(df[, c(3, 4, 5)], as.numeric)
state <- "AK"
outcome <- "heart failure"
num <- 10L
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
## Check that state and outcome are valid
## Return hospital name in that state with the given rank
## 30-day death rate
states <- unique(df$State)
outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!(state %in% states)) {
stop("invalid state")
}
if (!(outcome %in% outcomes)) {
stop("invalid outcome")
}
df2 <- df[df$State == state, ]
if (outcome == "heart attack") {
df2 <- df2[order(df2[, 3], df2[, 1]), ]
df2 <- df2[!is.na(df2[, 3]), ]
}
else if (outcome == "heart failure") {
df2 <- df2[order(df2[, 4], df2[, 1]), ]
df2 <- df2[!is.na(df2[, 4]), ]
}
else {
df2 <- df2[order(df2[, 5], df2[, 1]), ]
df2 <- df2[!is.na(df2[, 5]), ]
}
if (num == "best") {
num <- 1L
}
else if (num == "worst") {
num <- nrow(df2)
}
else {
num <- as.numeric(num)
}
df2[num, 1]
}
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
submit()
submit()
submit()
submit()
df <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
df <- df[c(2, 7, 11, 17, 23)]
df[, c(3, 4, 5)] <- sapply(df[, c(3, 4, 5)], as.numeric)
rankall <- function(outcome, num = "best") {
## Read outcome data
## Check that state and outcome are valid
## Return hospital name in that state with the given rank
## 30-day death rate
states <- unique(df$State)
states <- sort(states)
ranks <- data.frame(hospital=NA, state=NA)
for (i in 1:length(states)) {
ranks[i, ] <- c(rankhospital(states[i], outcome, num), states[i])
}
ranks
}
df <- df[order(df[, 4]), ]
df <- df[!is.na(df[, 4]), ]
rstudio::viewData(df[df$State == state, ])
df <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
df <- df[c(2, 7, 11, 17, 23)]
df[, c(3, 4, 5)] <- sapply(df[, c(3, 4, 5)], as.numeric)
rankall <- function(outcome, num = "best") {
## Read outcome data
## Check that state and outcome are valid
## Return hospital name in that state with the given rank
## 30-day death rate
states <- unique(df$State)
states <- sort(states)
ranks <- data.frame(hospital=NA, state=NA)
for (i in 1:length(states)) {
ranks[i, ] <- c(rankhospital(states[i], outcome, num), states[i])
}
ranks
}
#df <- df[order(df[, 4]), ]
#df <- df[!is.na(df[, 4]), ]
#rstudio::viewData(df[df$State == state, ])
head(rankall("heart attack", 20), 10)
submit()
submit()
submit()
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
?set.seed
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
?rbinom
summaryRprof()
?system.time
