?<<-
## Coursera - R Programming - Assignment 2
## Matrix inversion is usually a costly computation and there may be some
## benefit to caching the inverse of a matrix rather than computing it
## repeatedly.
## makeCacheMatrix is a function that creates a special matrix object that can
## cache its inverse.
## Steps:
## 1. Set the value of the matrix
## 2. Get the value of the matrix
## 3. Set the value of the inverse of the matrix
## 4. Get the value of the inverse of the matrix
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
## cacheSolve: This function computes the inverse of the special matrix returned
## by makeCacheMatrix above. If the inverse has already been calculated (and the
## matrix has not changed), then cacheSolve should retrieve the inverse from the
## cache.
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("Found in Cache, Retrieving...")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
x <- rbind(c(1,-1/4), c(-1/4, 1))
x
m <- makeCacheMatrix(x)
m$get()
cacheSolve(m)
cacheSolve(m)
solve(x)
x <- rbind(c(1,1/4), c(1/4, 1))
x
cm <- makeCacheMatrix(x)
cm
cm$get()
cacheSolve(cm)
cacheSolve(cm)
?gl
data("iris")
?iris
iris
apply(iris, 2, mean)
apply(iris, 1, mean)
apply(iris[,1:4], 2, mean)
rowMeans(iris[,1:4])
s <- split(iris, iris$Species)
s
apply(s[,1:4], 2, mean)
sapply(s,2,mean)
s
lapply(s,mean)
s$virginica
s$virginica -> iris.virginica
apply(iris.virginica[,1:4], 2, mean)
data("mtcars")
mtcars
split(mtcars,mtcars$cyl)
?mean
sapply(mtcars, cyl, mean)
split(mtcars,mtcars$cyl) -> s
s$4 -> mtcars.4
s$`4` -> mtcars.4
s$`8` -> mtcars.8
apply(mtcars.4[,5], 2, mean)
apply(mtcars.4[,2:5], 2, mean)
apply(mtcars.4[,5:5], 2, mean)
apply(mtcars.8[,2:5], 2, mean)
209.214286-82.636364
debug(ls)
?debug
tapply
quit
afl
adf
